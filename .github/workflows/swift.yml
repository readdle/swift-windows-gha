name: swift
on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: 'Tag to fetch'     
        required: false
      branch_spec:
        description: 'Branch specification'
        required: true
        type: choice
        default: 'main'
        options:
        - 'main'
        - '5.5'
        - '5.4'
        - '5.3'
      runs_on:
        description: 'Runner label'
        required: true
        type: choice
        default: 'windows-latest'
        options:
        - 'windows-latest'
        - 'self-hosted'
      check_run_id:
        description: Check Run ID
        required: false

jobs:
  tools:
    name: Build Tools
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        branch: ['${{ github.event.inputs.branch_spec }}']
        runs_on: ['${{ github.event.inputs.runs_on }}']
        
    outputs:
      llvm_ref: ${{ steps.checkout_info.outputs.llvm_ref }}
      swift_ref: ${{ steps.checkout_info.outputs.swift_ref }}
      dispatch_ref_apple: ${{ steps.checkout_info.outputs.dispatch_ref_apple }}
      dispatch_ref_readdle: ${{ steps.checkout_info.outputs.dispatch_ref_readdle }}
      cmark_ref: ${{ steps.checkout_info.outputs.cmark_ref }}
      swift_syntax_ref: ${{ steps.checkout_info.outputs.swift_syntax_ref }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: Clean Workspace
        if: github.event.inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Checkout 
        uses: actions/checkout@v3.1.0

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ matrix.branch }}^
           --git-tag=${{ github.event.inputs.tag }}

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\tools\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout LLVM
        uses: actions/checkout@v3.1.0
        with:
          repository: 'apple/llvm-project'
          ref: ${{ env.SW_LLVM_REF }}
          fetch-depth: 1
          path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

      - name: Checkout swift
        uses: actions/checkout@v3.1.0
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

      - name: Checkout cmark
        uses: actions/checkout@v3.1.0
        with:
          repository: 'apple/swift-cmark'
          ref: ${{ env.SW_CMARK_REF }}
          fetch-depth: 1
          path: '${{ env.SW_CMARK_SOURCES_DIR }}'

      - name: Checkout libdispatch
        uses: actions/checkout@v3.1.0
        with:
          repository: ${{ env.SW_DISPATCH_REPO }}
          ref: ${{ env.SW_DISPATCH_REF }}
          fetch-depth: 1
          path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

      - name: Checkout swift-syntax
        uses: actions/checkout@v3.1.0
        with:
          repository: 'apple/swift-syntax'
          ref: ${{ env.SW_SWIFT_SYNTAX_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SYNTAX_SOURCES_DIR }}'

      - name: Collect Checkout Info
        id: checkout_info
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C %SW_LLVM_PROJECT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          git -C %SW_SWIFT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt
          git -C %SW_DISPATCH_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          git -C %SW_CMARK_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\cmark.txt
          git -C %SW_SWIFT_SYNTAX_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-syntax.txt

          set /p SW_LLVM_SHA=< %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          set /p SW_SWIFT_SHA=< %GITHUB_WORKSPACE%\checkout\swift.txt
          set /p SW_DISPATCH_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          set /p SW_CMARK_SHA=< %GITHUB_WORKSPACE%\checkout\cmark.txt
          set /p SW_SWIFT_SYNTAX_SHA=< %GITHUB_WORKSPACE%\checkout\swift-syntax.txt

          echo ::set-output name=llvm_ref::%SW_LLVM_SHA%
          echo ::set-output name=swift_ref::%SW_SWIFT_SHA%
          echo ::set-output name=dispatch_ref_${{ matrix.spec }}::%SW_DISPATCH_SHA%
          echo ::set-output name=cmark_ref::%SW_CMARK_SHA%
          echo ::set-output name=swift_syntax_ref::%SW_SWIFT_SYNTAX_SHA%

      - name: Configure Build Tools
        run: scripts\workflows\jobs\steps\tools\configure-tools.cmd

      - name: Build llvm-config
        run: scripts\workflows\jobs\steps\tools\build-llvm-config.cmd

      - name: Build llvm-tblgen
        run: scripts\workflows\jobs\steps\tools\build-llvm-tblgen.cmd

      - name: Build clang-tblgen
        run: scripts\workflows\jobs\steps\tools\build-clang-tblgen.cmd

      - name: Build lldb-tblgen
        run: scripts\workflows\jobs\steps\tools\build-lldb-tblgen.cmd

      - name: Build swift-serialize-diagnostics
        run: scripts\workflows\jobs\steps\tools\build-swift-serialize-diagnostics.cmd

      - name: Build swift-def-to-strings-converter
        run: scripts\workflows\jobs\steps\tools\build-swift-def-to-strings-converter.cmd

      - name: Prepare Artifact
        run: |
          mkdir %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\llvm-config.exe %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\llvm-tblgen.exe %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\clang-tblgen.exe %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\lldb-tblgen.exe %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\swift-serialize-diagnostics.exe %SW_INSTALL_DIR%\build-tools\bin
          copy %SW_TOOLS_BUILD_DIR%\bin\swift-def-to-strings-converter.exe %SW_INSTALL_DIR%\build-tools\bin

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: build-tools
          path: ${{ env.SW_INSTALL_DIR }}/build-tools

  # toolchain:
  #   name: Toolchain
  #   runs-on: ${{ matrix.runs_on }}
  #   needs: [tools]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       branch: ['${{ github.event.inputs.branch_spec }}']
  #       spec: [apple, readdle]
  #       runs_on: ['${{ github.event.inputs.runs_on }}']
  #       include:
  #         - spec: apple
  #           enable-no-objc-patch: NO
  #           skip-swift-test: NO
  #         - spec: readdle
  #           enable-no-objc-patch: YES
  #           skip-swift-test: YES

  #   outputs:
  #     llvm_ref: ${{ steps.checkout_info.outputs.llvm_ref }}
  #     swift_ref: ${{ steps.checkout_info.outputs.swift_ref }}
  #     dispatch_ref_apple: ${{ steps.checkout_info.outputs.dispatch_ref_apple }}
  #     dispatch_ref_readdle: ${{ steps.checkout_info.outputs.dispatch_ref_readdle }}

  #   defaults:
  #     run:
  #       shell: cmd

  #   steps:
  #     - name: Clean Workspace
  #       if: github.event.inputs.runs_on == 'self-hosted'
  #       run: |
  #         for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
  #         del /f /q /s ${{ github.workspace }}

  #     - name: Checkout 
  #       uses: actions/checkout@v3.1.0

  #     - name: Select Python Version
  #       id: select-python-version
  #       run: |
  #         if "${{ matrix.branch }}"=="5.3" (
  #           echo ::set-output name=python-version::2.7.x
  #           echo SW_PYTHON_DIR=C:\Python27>>%GITHUB_ENV%
  #         ) else (
  #           echo ::set-output name=python-version::3.9.x
  #           echo SW_PYTHON_DIR="C:\Program Files\Python39">>%GITHUB_ENV%
  #         )

  #     - name: Setup Python ${{ steps.select-python-version.outputs.python-version }}
  #       if: github.event.inputs.runs_on != 'self-hosted'
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ steps.select-python-version.outputs.python-version }}

  #     - name: Export Python Path
  #       if: github.event.inputs.runs_on != 'self-hosted'
  #       run: |
  #         echo SW_PYTHON_DIR="%pythonLocation%">>%GITHUB_ENV%

  #     - name: Get CMake 3.21.3
  #       if: github.event.inputs.runs_on != 'self-hosted' && matrix.branch != '5.3' && matrix.branch != '5.4'
  #       run: |
  #         choco install cmake --version=3.21.3

  #     - name: Get CMake 3.19.8
  #       if: github.event.inputs.runs_on != 'self-hosted' && (matrix.branch == '5.3' || matrix.branch == '5.4')
  #       run: |
  #         choco install cmake --version=3.19.8
          
  #     - name: Configure Build
  #       run: |
  #         scripts\configure.cmd^
  #          --interactive=NO^
  #          --sources-dir=%GITHUB_WORKSPACE%\s^
  #          --build-dir=%GITHUB_WORKSPACE%\b^
  #          --install-dir=%GITHUB_WORKSPACE%\i^
  #          --artifacts-dir=%GITHUB_WORKSPACE%\a^
  #          --python-dir=%SW_PYTHON_DIR%^
  #          --branch=${{ matrix.branch }}^
  #          --enable-no-objc-patch=${{ matrix.enable-no-objc-patch }}^
  #          --skip-toolchain-swift-test=${{ matrix.skip-swift-test }}^
  #          --sdk=${{ matrix.spec }}^
  #          --git-tag=${{ github.event.inputs.tag }}

  #     - name: Configure Build Environment
  #       run: |
  #         if "${{ matrix.branch }}"=="5.3" set SW_VC_VERSION=14.28.29910
  #         call scripts\workflows\configure-build-environment.cmd
  #         call scripts\workflows\load-configuration.cmd
  #         call scripts\workflows\jobs\steps\toolchain\configure-build-environment.cmd
  #         call scripts\tools\export-environment.cmd

  #     - name: Configure Git
  #       run: scripts\workflows\jobs\steps\toolchain\configure-git.cmd

  #     - name: Checkout LLVM
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/llvm-project'
  #         ref: ${{ env.SW_LLVM_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

  #     - name: Checkout cmark
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/swift-cmark'
  #         ref: ${{ env.SW_CMARK_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_CMARK_SOURCES_DIR }}'

  #     - name: Checkout libdispatch
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: ${{ env.SW_DISPATCH_REPO }}
  #         ref: ${{ env.SW_DISPATCH_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

  #     - name: Checkout swift
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/swift'
  #         ref: ${{ env.SW_SWIFT_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

  #     - name: Collect Checkout Info
  #       id: checkout_info
  #       run: |
  #         mkdir %GITHUB_WORKSPACE%\checkout
  #         git -C %SW_LLVM_PROJECT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
  #         git -C %SW_SWIFT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt
  #         git -C %SW_DISPATCH_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          
  #         set /p SW_LLVM_SHA=< %GITHUB_WORKSPACE%\checkout\llvm-project.txt
  #         set /p SW_SWIFT_SHA=< %GITHUB_WORKSPACE%\checkout\swift.txt
  #         set /p SW_DISPATCH_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          
  #         echo ::set-output name=llvm_ref::%SW_LLVM_SHA%
  #         echo ::set-output name=swift_ref::%SW_SWIFT_SHA%
  #         echo ::set-output name=dispatch_ref_${{ matrix.spec }}::%SW_DISPATCH_SHA%

  #     - name: Patch LLVM
  #       run: scripts\workflows\jobs\steps\toolchain\patch-llvm.cmd

  #     - name: Patch Swift
  #       run: scripts\workflows\jobs\steps\toolchain\patch-swift.cmd

  #     - name: Download ICU
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: icu.yml
  #         name: icu
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Configure LLVM Build Tools
  #       run: scripts\workflows\jobs\steps\toolchain\configure-llvm-build-tools.cmd

  #     - name: Build LLVM Build Tools
  #       run: scripts\workflows\jobs\steps\toolchain\build-llvm-build-tools.cmd

  #     - name: Build Clang Build Tools
  #       run: scripts\workflows\jobs\steps\toolchain\build-clang-build-tools.cmd

  #     - name: Build LLDB Build Tools
  #       run: scripts\workflows\jobs\steps\toolchain\build-lldb-build-tools.cmd

  #     - name: Build Diagnostics Serialization Tools
  #       run: scripts\workflows\jobs\steps\toolchain\build-swift-serialize-diagnostics.cmd

  #     - name: Configure SDK Modules
  #       run: scripts\workflows\jobs\steps\toolchain\configure-sdk-modules.cmd

  #     - name: Configure Toolchain
  #       run: scripts\workflows\jobs\steps\toolchain\configure-toolchain.cmd

  #     - name: Build Toolchain
  #       run: scripts\workflows\jobs\steps\toolchain\build-toolchain.cmd

  #     - name: Install Toolchain
  #       run: scripts\workflows\jobs\steps\toolchain\install-toolchain.cmd

  #     - name: Restructure Internal Modules
  #       run: scripts\workflows\jobs\steps\toolchain\restructure-modules.cmd

  #     - name: Configure Compiler Runtime
  #       run: scripts\workflows\jobs\steps\toolchain\configure-compiler-runtime.cmd

  #     - name: Install Compiler Runtime
  #       run: scripts\workflows\jobs\steps\toolchain\install-compiler-runtime.cmd

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: toolchain-${{ matrix.spec }}
  #         path: ${{ env.SW_INSTALL_DIR }}

  #     - name: Configure Test Environment
  #       run: scripts\workflows\jobs\steps\toolchain\configure-test-environment.cmd

  #     - name: Check Swift
  #       continue-on-error: true
  #       run: scripts\workflows\jobs\steps\toolchain\check-swift.cmd

  # sdk:
  #   name: SDK
  #   runs-on: ${{ matrix.runs_on }}
  #   needs: [toolchain]
  #   if: cancelled() == false && needs.toolchain.result == 'success'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       branch: ['${{ github.event.inputs.branch_spec }}']
  #       spec: [apple, readdle]
  #       runs_on: ['${{ github.event.inputs.runs_on }}']
  #       include:
  #         - spec: apple
  #           stdlib-patch-enabled: NO 
  #         - spec: readdle
  #           stdlib-patch-enabled: YES

  #   defaults:
  #     run:
  #       shell: cmd

  #   steps:
  #     - name: Clean Workspace
  #       if: github.event.inputs.runs_on == 'self-hosted'
  #       run: |
  #         for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
  #         del /f /q /s ${{ github.workspace }}

  #     - name: Checkout
  #       uses: actions/checkout@v3.1.0

  #     - name: Read Checkout Info
  #       run: |
  #         set SW_LLVM_REF=${{ needs.toolchain.outputs.llvm_ref }}
  #         set SW_SWIFT_REF=${{ needs.toolchain.outputs.swift_ref }}
  #         set SW_DISPATCH_REF=${{ needs.toolchain.outputs[format('dispatch_ref_{0}', matrix.spec)] }}
          
  #         echo llvm-project rev is %SW_LLVM_REF%
  #         echo swift rev is %SW_SWIFT_REF%
  #         echo swift-corelibs-libdispatch rev is %SW_DISPATCH_REF%
          
  #         echo SW_LLVM_REF=%SW_LLVM_REF%>>%GITHUB_ENV%
  #         echo SW_SWIFT_REF=%SW_SWIFT_REF%>>%GITHUB_ENV%
  #         echo SW_DISPATCH_REF=%SW_DISPATCH_REF%>>%GITHUB_ENV%

  #     - name: Select Python Version
  #       id: select-python-version
  #       run: |
  #         if "${{ matrix.branch }}"=="5.3" (
  #           echo ::set-output name=python-version::2.7.x
  #           echo SW_PYTHON_DIR=C:\Python27>>%GITHUB_ENV%
  #         ) else (
  #           echo ::set-output name=python-version::3.9.x
  #           echo SW_PYTHON_DIR="C:\Program Files\Python39">>%GITHUB_ENV%
  #         )

  #     - name: Setup Python ${{ steps.select-python-version.outputs.python-version }}
  #       if: github.event.inputs.runs_on != 'self-hosted'
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ steps.select-python-version.outputs.python-version }}

  #     - name: Export Python Path
  #       if: github.event.inputs.runs_on != 'self-hosted'
  #       run: |
  #         echo SW_PYTHON_DIR="%pythonLocation%">>%GITHUB_ENV%

  #     - name: Get CMake 3.21.3
  #       if: github.event.inputs.runs_on != 'self-hosted' && matrix.branch != '5.3' && matrix.branch != '5.4'
  #       run: |
  #         choco install cmake --version=3.21.3

  #     - name: Get CMake 3.19.8
  #       if: github.event.inputs.runs_on != 'self-hosted' && (matrix.branch == '5.3' || matrix.branch == '5.4')
  #       run: |
  #         choco install cmake --version=3.19.8

  #     - name: Configure Build
  #       run: |
  #         scripts\configure.cmd^
  #          --interactive=NO^
  #          --sources-dir=%GITHUB_WORKSPACE%\s^
  #          --build-dir=%GITHUB_WORKSPACE%\b^
  #          --install-dir=%GITHUB_WORKSPACE%\i^
  #          --artifacts-dir=%GITHUB_WORKSPACE%\a^
  #          --python-dir=%SW_PYTHON_DIR%^
  #          --branch=${{ matrix.branch }}^
  #          --enable-print-patch=${{ matrix.stdlib-patch-enabled }}^
  #          --sdk=${{ matrix.spec }}^
  #          --git-tag=${{ github.event.inputs.tag }}

  #     - name: Configure Build Environment
  #       run: |
  #         if "${{ matrix.branch }}"=="5.3" set SW_VC_VERSION=14.28.29910
  #         call scripts\workflows\configure-build-environment.cmd
  #         call scripts\workflows\load-configuration.cmd
  #         call scripts\workflows\jobs\steps\sdk\configure-build-environment.cmd
  #         call scripts\tools\export-environment.cmd

  #     - name: Configure Git
  #       run: scripts\workflows\jobs\steps\sdk\configure-git.cmd

  #     - name: Checkout LLVM
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/llvm-project'
  #         ref: ${{ env.SW_LLVM_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

  #     - name: Checkout swift
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/swift'
  #         ref: ${{ env.SW_SWIFT_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

  #     - name: Checkout libdispatch
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: ${{ env.SW_DISPATCH_REPO }}
  #         ref: ${{ env.SW_DISPATCH_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

  #     - name: Checkout foundation
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: ${{ env.SW_FOUNDATION_REPO }}
  #         ref: ${{ env.SW_FOUNDATION_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_FOUNDATION_SOURCES_DIR }}'

  #     - name: Checkout xctest
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         repository: 'apple/swift-corelibs-xctest'
  #         ref: ${{ env.SW_XCTEST_REF }}
  #         fetch-depth: 1
  #         path: '${{ env.SW_XCTEST_SOURCES_DIR }}'

  #     - name: Patch LLVM
  #       run: scripts\workflows\jobs\steps\toolchain\patch-llvm.cmd

  #     - name: Patch StdLib
  #       run: scripts\workflows\jobs\steps\sdk\patch-stdlib.cmd

  #     - name: Download ICU
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: icu.yml
  #         name: icu
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Download zlib
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: zlib.yml
  #         name: zlib
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Download curl
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: curl.yml
  #         name: curl
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Download libxml2
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: libxml2.yml
  #         name: libxml2
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Download toolchain
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: toolchain-${{ matrix.spec }}
  #         path: '${{ env.SW_ARTIFACTS_DIR }}'

  #     - name: Configure SDK Modules
  #       run: scripts\workflows\jobs\steps\toolchain\configure-sdk-modules.cmd

  #     - name: Configure LLVM
  #       run:  scripts\workflows\jobs\steps\sdk\configure-llvm.cmd

  #     - name: Configure Swift Standard Library
  #       run: scripts\workflows\jobs\steps\sdk\configure-swift-stdlib.cmd

  #     - name: Build Swift Standard Library
  #       run: scripts\workflows\jobs\steps\sdk\build-swift-stdlib.cmd

  #     - name: Configure libdispatch
  #       run: scripts\workflows\jobs\steps\sdk\configure-libdispatch.cmd

  #     - name: Build libdispatch
  #       run: scripts\workflows\jobs\steps\sdk\build-libdispatch.cmd

  #     - name: Configure Foundation
  #       run: scripts\workflows\jobs\steps\sdk\configure-foundation.cmd

  #     - name: Build Foundation
  #       run: scripts\workflows\jobs\steps\sdk\build-foundation.cmd

  #     - name: Configure XCTest
  #       run: scripts\workflows\jobs\steps\sdk\configure-xctest.cmd

  #     - name: Build XCTest
  #       run: scripts\workflows\jobs\steps\sdk\build-xctest.cmd

  #     - name: Install Swift Standard Library
  #       run: scripts\workflows\jobs\steps\sdk\install-swift-stdlib.cmd

  #     - name: Install Foundation
  #       run: scripts\workflows\jobs\steps\sdk\install-foundation.cmd

  #     - name: Install XCTest
  #       run: scripts\workflows\jobs\steps\sdk\install-xctest.cmd

  #     - name: Install libdispatch
  #       run: scripts\workflows\jobs\steps\sdk\install-libdispatch.cmd

  #     - name: Install Module Maps
  #       run: scripts\workflows\jobs\steps\sdk\install-module-maps.cmd

  #     - name: Restructure Modules
  #       run: scripts\workflows\jobs\steps\sdk\restructure-modules.cmd

  #     - name: Generate plists
  #       run: scripts\workflows\jobs\steps\sdk\generate-plists.cmd

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: sdk-${{ matrix.spec }}
  #         path: ${{ env.SW_INSTALL_DIR }}

  #     - name: Configure libdispatch Tests
  #       run: scripts\workflows\jobs\steps\sdk\configure-libdispatch-tests.cmd

  #     - name: Build libdispatch Tests
  #       run: scripts\workflows\jobs\steps\sdk\build-libdispatch.cmd

  #     - name: Test libdispatch
  #       continue-on-error: true
  #       run: scripts\workflows\jobs\steps\sdk\test-libdispatch.cmd

  #     - name: Configure Foundation Test Environment
  #       run: scripts\workflows\jobs\steps\sdk\configure-foundation-test-environment.cmd

  #     - name: Configure Foundation Tests
  #       run: scripts\workflows\jobs\steps\sdk\configure-foundation-tests.cmd

  #     - name: Build Foundation Tests
  #       run: scripts\workflows\jobs\steps\sdk\build-foundation.cmd

  #     - name: Test Foundation (CTest)
  #       continue-on-error: true
  #       timeout-minutes: 10
  #       run: scripts\workflows\jobs\steps\sdk\test-foundation-ctest.cmd

  #     - name: Test Foundation (XCTest)
  #       timeout-minutes: 10
  #       continue-on-error: true
  #       run: scripts\workflows\jobs\steps\sdk\test-foundation-xctest.cmd

  # check-out:
  #   name: Check Out
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [check-in, toolchain, sdk]

  #   steps:
  #     - name: Update CI Check - Success
  #       if: github.event.inputs.check_run_id && needs.toolchain.result == 'success' && needs.sdk.result == 'success'
  #       env:
  #         CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
  #       run: |
  #         set -e
          
  #         http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
  #           -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
  #           -d '{"conclusion":"success"}')
          
  #         echo $http_code
  #         if [ "$http_code" != "200" ]; then
  #           echo "::error::Failed to update check run"
  #           exit 1
  #         fi

  #     - name: Update CI Check - Failure
  #       if: github.event.inputs.check_run_id && contains(needs.*.result, 'failure')
  #       env:
  #         CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
  #       run: |
  #         set -e
          
  #         http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
  #           -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
  #           -d '{"conclusion":"failure"}')
          
  #         echo $http_code
  #         if [ "$http_code" != "200" ]; then
  #           echo "::error::Failed to update check run"
  #           exit 1
  #         fi

  #     - name: Update CI Check - Cancelled
  #       if: github.event.inputs.check_run_id && contains(needs.*.result, 'cancelled')
  #       env:
  #         CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
  #       run: |
  #         set -e
          
  #         http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
  #           -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
  #           -d '{"conclusion":"cancelled"}')
          
  #         echo $http_code
  #         if [ "$http_code" != "200" ]; then
  #           echo "::error::Failed to update check run"
  #           exit 1
  #         fi

  #     - name: Update Badge - Success
  #       uses: schneegans/dynamic-badges-action@v1.6.0
  #       if: github.ref == 'refs/heads/master' && needs.toolchain.result == 'success' && needs.sdk.result == 'success'
  #       with:
  #         auth: ${{ secrets.GISTS_TOKEN }}
  #         gistID: e75dcdc92f031e71745ff1dbb56decd4
  #         filename: ${{ github.workflow }}-${{ github.event.inputs.branch_spec }}-badge.json
  #         label: ${{ github.workflow }}-${{ github.event.inputs.branch_spec }}
  #         message: success
  #         color: success

  #     - name: Update Badge - Failure
  #       uses: schneegans/dynamic-badges-action@v1.6.0
  #       if: github.ref == 'refs/heads/master' && contains(needs.*.result, 'failure')
  #       with:
  #         auth: ${{ secrets.GISTS_TOKEN }}
  #         gistID: e75dcdc92f031e71745ff1dbb56decd4
  #         filename: ${{ github.workflow }}-${{ github.event.inputs.branch_spec }}-badge.json
  #         label: ${{ github.workflow }}-${{ github.event.inputs.branch_spec }}
  #         message: failure
  #         color: critical
