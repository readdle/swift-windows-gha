name: swift
run-name: swift-${{ inputs.branch_spec }}-${{ inputs.build_spec }}

on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: 'Tag to fetch'     
        required: false
      branch_spec:
        description: 'Branch specification'
        required: true
        type: choice
        default: 'main'
        options:
        - 'main'
        - '5.7'
      build_spec: 
        description: 'Build specification'
        required: true
        type: choice
        default: 'apple'
        options:
        - 'apple'
        - 'readdle'
      runs_on:
        description: 'Runner label'
        required: true
        type: choice
        default: 'windows-latest'
        options:
        - 'windows-latest'
        - 'self-hosted'

defaults:
  run:
    shell: cmd

jobs:
  tools:
    name: Host Tools
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]
        
    outputs:
      llvm_ref: ${{ steps.checkout_info.outputs.llvm_ref }}
      swift_ref: ${{ steps.checkout_info.outputs.swift_ref }}
      dispatch_ref: ${{ steps.checkout_info.outputs.dispatch_ref }}
      dispatch_repo: ${{ steps.checkout_info.outputs.dispatch_repo }}
      cmark_ref: ${{ steps.checkout_info.outputs.cmark_ref }}
      swift_syntax_ref: ${{ steps.checkout_info.outputs.swift_syntax_ref }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ inputs.branch_spec }}^
           --git-tag=${{ inputs.tag }}

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\tools\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout llvm-project
        uses: actions/checkout@v3
        with:
          repository: 'apple/llvm-project'
          ref: ${{ env.SW_LLVM_REF }}
          fetch-depth: 1
          path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

      - name: Checkout swift
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

      - name: Checkout swift-cmark
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-cmark'
          ref: ${{ env.SW_CMARK_REF }}
          fetch-depth: 1
          path: '${{ env.SW_CMARK_SOURCES_DIR }}'

      - name: Checkout swift-corelibs-libdispatch
        uses: actions/checkout@v3.1.0
        with:
          repository: ${{ env.SW_DISPATCH_REPO }}
          ref: ${{ env.SW_DISPATCH_REF }}
          fetch-depth: 1
          path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

      - name: Checkout swift-syntax
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-syntax'
          ref: ${{ env.SW_SWIFT_SYNTAX_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SYNTAX_SOURCES_DIR }}'

      - name: Collect Checkout Info
        id: checkout_info
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C %SW_LLVM_PROJECT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          git -C %SW_SWIFT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt
          git -C %SW_DISPATCH_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          git -C %SW_CMARK_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\cmark.txt
          git -C %SW_SWIFT_SYNTAX_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-syntax.txt

          set /p SW_LLVM_SHA=< %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          set /p SW_SWIFT_SHA=< %GITHUB_WORKSPACE%\checkout\swift.txt
          set /p SW_DISPATCH_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          set /p SW_CMARK_SHA=< %GITHUB_WORKSPACE%\checkout\cmark.txt
          set /p SW_SWIFT_SYNTAX_SHA=< %GITHUB_WORKSPACE%\checkout\swift-syntax.txt

          echo llvm_ref=%SW_LLVM_SHA%>>%GITHUB_OUTPUT%
          echo swift_ref=%SW_SWIFT_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_ref=%SW_DISPATCH_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_repo=%SW_DISPATCH_REPO%>>%GITHUB_OUTPUT%
          echo cmark_ref=%SW_CMARK_SHA%>>%GITHUB_OUTPUT%
          echo swift_syntax_ref=%SW_SWIFT_SYNTAX_SHA%>>%GITHUB_OUTPUT%

      - name: Configure Build Tools
        run: scripts\workflows\jobs\steps\tools\configure-tools.cmd

      - name: Build llvm-config
        run: scripts\workflows\jobs\steps\tools\build-llvm-config.cmd

      - name: Build llvm-tblgen
        run: scripts\workflows\jobs\steps\tools\build-llvm-tblgen.cmd

      - name: Build clang-tblgen
        run: scripts\workflows\jobs\steps\tools\build-clang-tblgen.cmd

      - name: Build lldb-tblgen
        run: scripts\workflows\jobs\steps\tools\build-lldb-tblgen.cmd

      - name: Build swift-serialize-diagnostics
        run: scripts\workflows\jobs\steps\tools\build-swift-serialize-diagnostics.cmd

      - name: Build swift-def-to-strings-converter
        run: scripts\workflows\jobs\steps\tools\build-swift-def-to-strings-converter.cmd

      - name: Build swift-compatibility-symbols
        run: scripts\workflows\jobs\steps\tools\build-swift-compatibility-symbols.cmd

      - name: Install Build Tools
        run: scripts\workflows\jobs\steps\tools\install-tools.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-tools-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  toolchain:
    name: Toolchain
    runs-on: ${{ inputs.runs_on }}
    needs: [tools]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]
    
    outputs:
      llvm_ref: ${{ steps.checkout_info.outputs.llvm_ref }}
      swift_ref: ${{ steps.checkout_info.outputs.swift_ref }}
      dispatch_ref: ${{ steps.checkout_info.outputs.dispatch_ref }}
      cmark_ref: ${{ steps.checkout_info.outputs.cmark_ref }}
      swift_syntax_ref: ${{ steps.checkout_info.outputs.swift_syntax_ref }}
      swift_experimental_string_processing_ref: ${{ steps.checkout_info.outputs.swift_experimental_string_processing_ref }}
      dispatch_repo: ${{ steps.checkout_info.outputs.dispatch_repo }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: Clean Workspace
        if: github.event.inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Read Checkout Info
        run: |
          set SW_LLVM_REF=${{ needs.tools.outputs.llvm_ref }}
          set SW_SWIFT_REF=${{ needs.tools.outputs.swift_ref }}
          set SW_DISPATCH_REF=${{ needs.tools.outputs.dispatch_ref }}
          set SW_CMARK_REF=${{ needs.tools.outputs.cmark_ref }}
          set SW_SWIFT_SYNTAX_REF=${{ needs.tools.outputs.swift_syntax_ref }}
          set SW_DISPATCH_REPO=${{ needs.tools.outputs.dispatch_repo }}

          echo llvm-project: %SW_LLVM_REF%
          echo swift: %SW_SWIFT_REF%
          echo swift-syntax: %SW_SWIFT_SYNTAX_REF%
          echo %SW_DISPATCH_REPO%: %SW_DISPATCH_REF%
          echo swift-cmark: %SW_CMARK_REF%
          
          echo SW_LLVM_REF=%SW_LLVM_REF%>>%GITHUB_ENV%
          echo SW_SWIFT_REF=%SW_SWIFT_REF%>>%GITHUB_ENV%
          echo SW_SWIFT_SYNTAX_REF=%SW_SWIFT_SYNTAX_REF%>>%GITHUB_ENV%
          echo SW_DISPATCH_REF=%SW_DISPATCH_REF%>>%GITHUB_ENV%
          echo SW_CMARK_REF=%SW_CMARK_REF%>>%GITHUB_ENV%
          echo SW_DISPATCH_REPO=%SW_DISPATCH_REPO%>>%GITHUB_ENV%

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure Build
        run: |
          if "${{ inputs.build_spec }}"=="readdle" (
            set SWC_ENABLE_NO_OBJ_PATCH=YES
          ) else (
            set SWC_ENABLE_NO_OBJ_PATCH=NO
          )

          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ inputs.branch_spec }}^
           --enable-no-objc-patch=%SWC_ENABLE_NO_OBJ_PATCH%^
           --sdk=${{ inputs.build_spec }}^
           --git-tag=${{ inputs.tag }}

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\toolchain\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Download Host Tools
        uses: actions/download-artifact@v3
        with:
          name: build-tools-amd64
          path: '${{ env.SW_ARTIFACTS_DIR }}'
        
      - name: Checkout llvm-project
        uses: actions/checkout@v3
        with:
          repository: 'apple/llvm-project'
          ref: ${{ env.SW_LLVM_REF }}
          fetch-depth: 1
          path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

      - name: Checkout swift-cmark
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-cmark'
          ref: ${{ env.SW_CMARK_REF }}
          fetch-depth: 1
          path: '${{ env.SW_CMARK_SOURCES_DIR }}'

      - name: Checkout swift-corelibs-libdispatch
        uses: actions/checkout@v3
        with:
          repository: ${{ env.SW_DISPATCH_REPO }}
          ref: ${{ env.SW_DISPATCH_REF }}
          fetch-depth: 1
          path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

      - name: Checkout swift-experimental-string-processing
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-experimental-string-processing'
          ref: ${{ env.SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SOURCES_DIR }}'

      - name: Checkout swift-syntax
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-syntax'
          ref: ${{ env.SW_SWIFT_SYNTAX_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SYNTAX_SOURCES_DIR }}'

      - name: Checkout swift
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

      - name: Collect Checkout Info
        id: checkout_info
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C %SW_LLVM_PROJECT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          git -C %SW_SWIFT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt
          git -C %SW_DISPATCH_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          git -C %SW_CMARK_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-cmark.txt
          git -C %SW_SWIFT_SYNTAX_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-syntax.txt
          git -C %SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-experimental-string-processing.txt

          set /p SW_LLVM_SHA=< %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          set /p SW_SWIFT_SHA=< %GITHUB_WORKSPACE%\checkout\swift.txt
          set /p SW_DISPATCH_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          set /p SW_CMARK_SHA=< %GITHUB_WORKSPACE%\checkout\swift-cmark.txt
          set /p SW_SWIFT_SYNTAX_SHA=< %GITHUB_WORKSPACE%\checkout\swift-syntax.txt
          set /p SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SHA=< %GITHUB_WORKSPACE%\checkout\swift-experimental-string-processing.txt

          echo llvm_ref=%SW_LLVM_SHA%>>%GITHUB_OUTPUT%
          echo swift_ref=%SW_SWIFT_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_ref=%SW_DISPATCH_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_repo=%SW_DISPATCH_REPO%>>%GITHUB_OUTPUT%
          echo cmark_ref=%SW_CMARK_SHA%>>%GITHUB_OUTPUT%
          echo swift_syntax_ref=%SW_SWIFT_SYNTAX_SHA%>>%GITHUB_OUTPUT%
          echo swift_experimental_string_processing_ref=%SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SHA%>>%GITHUB_OUTPUT%

      - name: Patch LLVM
        run: scripts\workflows\jobs\steps\toolchain\patch-llvm.cmd

      - name: Patch Swift
        run: scripts\workflows\jobs\steps\toolchain\patch-swift.cmd

      - name: Configure Toolchain
        run: scripts\workflows\jobs\steps\toolchain\configure-toolchain.cmd

      - name: Build Toolchain
        run: scripts\workflows\jobs\steps\toolchain\build-toolchain.cmd

      - name: Install Toolchain
        run: scripts\workflows\jobs\steps\toolchain\install-toolchain.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: toolchain-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  icu_tools:
    name: ICU Tools
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]

    outputs:
      icu_ref: ${{ steps.checkout_info.outputs.icu_ref }}
      swift_installer_scripts_ref: ${{ steps.checkout_info.outputs.swift_installer_scripts_ref }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ inputs.branch_spec }}
           
      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\icu-tools\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout swift-installer-scripts
        uses: actions/checkout@v3
        with:
          repository: apple/swift-installer-scripts
          ref: ${{ env.SW_SWIFT_INSTALLER_SCRIPTS_REF }}
          path: ${{ env.SW_SWIFT_INSTALLER_SCRIPTS_SOURCES_DIR }}

      - name: Checkout ICU
        uses: actions/checkout@v3
        with:
          repository: unicode-org/icu
          ref: ${{ env.SW_ICU_REF }}
          path: ${{ env.SW_ICU_SOURCES_DIR }}

      - name: Collect Checkout Info
        id: checkout_info
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C %SW_SWIFT_INSTALLER_SCRIPTS_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-installer-scripts.txt
          git -C %SW_ICU_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\icu.txt
          
          set /p SW_SWIFT_INSTALLER_SCRIPTS_SHA=< %GITHUB_WORKSPACE%\checkout\swift-installer-scripts.txt
          set /p SW_ICU_SHA=< %GITHUB_WORKSPACE%\checkout\icu.txt
          
          echo swift_installer_scripts_ref=%SW_SWIFT_INSTALLER_SCRIPTS_SHA%>>%GITHUB_OUTPUT%
          echo icu_ref=%SW_ICU_SHA%>>%GITHUB_OUTPUT%

      - name: Configure ICU Tools
        run: scripts\workflows\jobs\steps\icu-tools\configure-icu-tools.cmd

      - name: Build ICU Tools
        run: scripts\workflows\jobs\steps\icu-tools\build-icu-tools.cmd

      - name: Install ICU Tools
        run: scripts\workflows\jobs\steps\icu-tools\install-icu-tools.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: icu-tools-${{ env.SW_ICU_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  icu:
    name: ICU
    runs-on: ${{ inputs.runs_on }}
    needs: [icu_tools]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, x86]

    env:
      SW_ARCH: ${{ matrix.arch }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Read Checkout Info
        run: |
          set SW_SWIFT_INSTALLER_SCRIPTS_REF=${{ needs.icu_tools.outputs.swift_installer_scripts_ref }}
          set SW_ICU_REF=${{ needs.icu_tools.outputs.icu_ref }}
          
          echo llvm-project: %SW_SWIFT_INSTALLER_SCRIPTS_REF%
          echo icu: %SW_ICU_REF%
          
          echo SW_SWIFT_INSTALLER_SCRIPTS_REF=%SW_SWIFT_INSTALLER_SCRIPTS_REF%>>%GITHUB_ENV%
          echo SW_ICU_REF=%SW_ICU_REF%>>%GITHUB_ENV%
          
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ inputs.branch_spec }}^
           --sdk=${{ inputs.build_spec }}
           
      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\icu\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Download ICU Tools
        uses: actions/download-artifact@v3
        with:
          name: icu-tools-${{ env.SW_ICU_VERSION }}-amd64
          path: '${{ env.SW_ARTIFACTS_DIR }}'

      - name: Checkout swift-installer-scripts
        uses: actions/checkout@v3
        with:
          repository: apple/swift-installer-scripts
          ref: ${{ env.SW_SWIFT_INSTALLER_SCRIPTS_REF }}
          path: ${{ env.SW_SWIFT_INSTALLER_SCRIPTS_SOURCES_DIR }}

      - name: Checkout ICU
        uses: actions/checkout@v3
        with:
          repository: unicode-org/icu
          ref: ${{ env.SW_ICU_REF }}
          path: ${{ env.SW_ICU_SOURCES_DIR }}

      - name: Configure ICU
        run: scripts\workflows\jobs\steps\icu\configure-icu.cmd

      - name: Build ICU
        run: scripts\workflows\jobs\steps\icu\build-icu.cmd

      - name: Install ICU
        run: scripts\workflows\jobs\steps\icu\install-icu.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: icu-${{ env.SW_ICU_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  zlib:
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, x86]

    env:
      SW_ARCH: ${{ matrix.arch }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a

      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\zlib\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout zlib
        uses: actions/checkout@v3
        with:
          repository: madler/zlib
          ref: ${{ env.SW_ZLIB_REF }}
          path: ${{ env.SW_ZLIB_SOURCES_DIR }}

      - name: Configure zlib
        run: scripts\workflows\jobs\steps\zlib\configure-zlib.cmd

      - name: Build zlib
        run: scripts\workflows\jobs\steps\zlib\build-zlib.cmd

      - name: Install zlib
        run: scripts\workflows\jobs\steps\zlib\install-zlib.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: zlib-${{ env.SW_ZLIB_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  curl:
    runs-on: ${{ inputs.runs_on }}
    needs: [zlib]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, x86]

    env:
      SW_ARCH: ${{ matrix.arch }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a

      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\curl\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout curl
        uses: actions/checkout@v3
        with:
          repository: curl/curl
          ref: ${{ env.SW_CURL_REF }}
          path: ${{ env.SW_CURL_SOURCES_DIR }}

      - name: Download zlib
        uses: actions/download-artifact@v3
        with:
          name: zlib-${{ env.SW_ZLIB_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Configure curl
        run: scripts\workflows\jobs\steps\curl\configure-curl.cmd

      - name: Build curl
        run: scripts\workflows\jobs\steps\curl\build-curl.cmd

      - name: Install curl
        run: scripts\workflows\jobs\steps\curl\install-curl.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: curl-${{ env.SW_CURL_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  libxml2:
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, x86]

    env:
      SW_ARCH: ${{ matrix.arch }}

    steps:
      - name: Clean Workspace
        if: inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout 
        uses: actions/checkout@v3.1.0

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a

      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\libxml2\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout libxml2
        uses: actions/checkout@v3
        with:
          repository: gnome/libxml2
          ref: ${{ env.SW_XML2_REF }}
          path: ${{ env.SW_XML2_SOURCES_DIR }}

      - name: Configure libxml2
        run: scripts\workflows\jobs\steps\libxml2\configure-libxml2.cmd

      - name: Build libxml2
        run: scripts\workflows\jobs\steps\libxml2\build-libxml2.cmd

      - name: Install libxml2
        run: scripts\workflows\jobs\steps\libxml2\install-libxml2.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: libxml2-${{ env.SW_XML2_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  sdk:
    name: SDK
    runs-on: ${{ inputs.runs_on }}
    needs: [icu, libxml2, curl, zlib, toolchain]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]

    env:
      SW_ARCH: ${{ matrix.arch }}

    outputs:
      llvm_ref: ${{ steps.checkout_info.outputs.llvm_ref }}
      swift_ref: ${{ steps.checkout_info.outputs.swift_ref }}
      dispatch_ref: ${{ steps.checkout_info.outputs.dispatch_ref }}
      foundation_ref: ${{ steps.checkout_info.outputs.foundation_ref }}
      xctest_ref: ${{ steps.checkout_info.outputs.xctest_ref }}
      cmark_ref: ${{ steps.checkout_info.outputs.cmark_ref }}
      swift_syntax_ref: ${{ steps.checkout_info.outputs.swift_syntax_ref }}
      swift_experimental_string_processing_ref: ${{ steps.checkout_info.outputs.swift_experimental_string_processing_ref }}
      dispatch_repo: ${{ steps.checkout_info.outputs.dispatch_repo }}
      foundation_repo: ${{ steps.checkout_info.outputs.foundation_repo }}

    steps:
      - name: Clean Workspace
        if: github.event.inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read Checkout Info
        run: |
          set SW_LLVM_REF=${{ needs.toolchain.outputs.llvm_ref }}
          set SW_SWIFT_REF=${{ needs.toolchain.outputs.swift_ref }}
          set SW_DISPATCH_REF=${{ needs.toolchain.outputs.dispatch_ref }}
          set SW_DISPATCH_REPO=${{ needs.toolchain.outputs.dispatch_repo }}
          set SW_CMARK_REF=${{ needs.toolchain.outputs.cmark_ref }}
          set SW_SWIFT_SYNTAX_REF=${{ needs.toolchain.outputs.swift_syntax_ref }}
          set SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF=${{ needs.toolchain.outputs.swift_experimental_string_processing_ref }}

          echo llvm-project: %SW_LLVM_REF%
          echo swift: %SW_SWIFT_REF%
          echo swift-syntax: %SW_SWIFT_SYNTAX_REF%
          echo %SW_DISPATCH_REPO%: %SW_DISPATCH_REF%
          echo swift-cmark: %SW_CMARK_REF%
          echo swift-experimental-string-processing: %SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF%

          echo SW_LLVM_REF=%SW_LLVM_REF%>>%GITHUB_ENV%
          echo SW_SWIFT_REF=%SW_SWIFT_REF%>>%GITHUB_ENV%
          echo SW_DISPATCH_REF=%SW_DISPATCH_REF%>>%GITHUB_ENV%
          echo SW_DISPATCH_REPO=%SW_DISPATCH_REPO%>>%GITHUB_ENV%
          echo SW_CMARK_REF=%SW_CMARK_REF%>>%GITHUB_ENV%
          echo SW_SWIFT_SYNTAX_REF=%SW_SWIFT_SYNTAX_REF%>>%GITHUB_ENV%
          echo SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF=%SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF%>>%GITHUB_ENV%

      - name: Configure Build
        run: |
          if "${{ inputs.build_spec }}"=="readdle" (
            set SWC_ENABLE_PRINT_PATCH=YES
          ) else (
            set SWC_ENABLE_PRINT_PATCH=NO
          )

          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a^
           --branch=${{ inputs.branch_spec }}^
           --skip-sdk-dispatch-test=YES^
           --skip-sdk-foundation-test=YES^
           --enable-print-patch=%SWC_ENABLE_PRINT_PATCH%^
           --sdk=${{ inputs.build_spec }}^
           --git-tag=${{ inputs.tag }}

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\sdk\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout llvm-project
        uses: actions/checkout@v3
        with:
          repository: 'apple/llvm-project'
          ref: ${{ env.SW_LLVM_REF }}
          fetch-depth: 1
          path: '${{ env.SW_LLVM_PROJECT_SOURCES_DIR }}'

      - name: Checkout swift
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

      - name: Checkout swift-cmark
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-cmark'
          ref: ${{ env.SW_CMARK_REF }}
          fetch-depth: 1
          path: '${{ env.SW_CMARK_SOURCES_DIR }}'

      - name: Checkout swift-experimental-string-processing
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-experimental-string-processing'
          ref: ${{ env.SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SOURCES_DIR }}'

      - name: Checkout swift-syntax
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift-syntax'
          ref: ${{ env.SW_SWIFT_SYNTAX_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SYNTAX_SOURCES_DIR }}'

      - name: Checkout swift-corelibs-libdispatch
        uses: actions/checkout@v3
        with:
          repository: ${{ env.SW_DISPATCH_REPO }}
          ref: ${{ env.SW_DISPATCH_REF }}
          fetch-depth: 1
          path: '${{ env.SW_DISPATCH_SOURCES_DIR }}'

      - name: Checkout swift-corelibs-foundation
        uses: actions/checkout@v3.1.0
        with:
          repository: ${{ env.SW_FOUNDATION_REPO }}
          ref: ${{ env.SW_FOUNDATION_REF }}
          fetch-depth: 1
          path: '${{ env.SW_FOUNDATION_SOURCES_DIR }}'

      - name: Checkout swift-corelibs-xctest
        uses: actions/checkout@v3.1.0
        with:
          repository: 'apple/swift-corelibs-xctest'
          ref: ${{ env.SW_XCTEST_REF }}
          fetch-depth: 1
          path: '${{ env.SW_XCTEST_SOURCES_DIR }}'

      - name: Collect Checkout Info
        id: checkout_info
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C %SW_LLVM_PROJECT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          git -C %SW_SWIFT_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt
          git -C %SW_DISPATCH_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          git -C %SW_FOUNDATION_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-foundation.txt
          git -C %SW_XCTEST_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-xctest.txt
          git -C %SW_CMARK_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-cmark.txt
          git -C %SW_SWIFT_SYNTAX_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-syntax.txt
          git -C %SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SOURCES_DIR% rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-experimental-string-processing.txt

          set /p SW_LLVM_SHA=< %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          set /p SW_SWIFT_SHA=< %GITHUB_WORKSPACE%\checkout\swift.txt
          set /p SW_DISPATCH_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          set /p SW_FOUNDATION_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-foundation.txt
          set /p SW_XCTEST_SHA=< %GITHUB_WORKSPACE%\checkout\swift-corelibs-xctest.txt
          set /p SW_CMARK_SHA=< %GITHUB_WORKSPACE%\checkout\swift-cmark.txt
          set /p SW_SWIFT_SYNTAX_SHA=< %GITHUB_WORKSPACE%\checkout\swift-syntax.txt
          set /p SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SHA=< %GITHUB_WORKSPACE%\checkout\swift-experimental-string-processing.txt

          echo llvm_ref=%SW_LLVM_SHA%>>%GITHUB_OUTPUT%
          echo swift_ref=%SW_SWIFT_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_ref=%SW_DISPATCH_SHA%>>%GITHUB_OUTPUT%
          echo dispatch_repo=%SW_DISPATCH_REPO%>>%GITHUB_OUTPUT%
          echo foundation_ref=%SW_FOUNDATION_SHA%>>%GITHUB_OUTPUT%
          echo foundation_repo=%SW_FOUNDATION_REPO%>>%GITHUB_OUTPUT%
          echo xctest_ref=%SW_XCTEST_SHA%>>%GITHUB_OUTPUT%
          echo cmark_ref=%SW_CMARK_SHA%>>%GITHUB_OUTPUT%
          echo swift_syntax_ref=%SW_SWIFT_SYNTAX_SHA%>>%GITHUB_OUTPUT%
          echo swift_experimental_string_processing_ref=%SW_SWIFT_EXPERIMENTAL_STRING_PROCESSING_SHA%>>%GITHUB_OUTPUT%

      - name: Patch Runtime
        run: |
          dir
          call scripts\workflows\jobs\steps\sdk\patch-runtime.cmd

      - name: Download ICU
        uses: actions/download-artifact@v3
        with:
          name: icu-${{ env.SW_ICU_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Download libxml2
        uses: actions/download-artifact@v3
        with:
          name: libxml2-${{ env.SW_XML2_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Download curl
        uses: actions/download-artifact@v3
        with:
          name: curl-${{ env.SW_CURL_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Download zlib
        uses: actions/download-artifact@v3
        with:
          name: zlib-${{ env.SW_ZLIB_VERSION }}-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Download toolchain
        uses: actions/download-artifact@v3
        with:
          name: toolchain-amd64
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Configure SDK Modules
        run: scripts\workflows\jobs\steps\sdk\configure-sdk-modules.cmd

      - name: Configure LLVM
        run: scripts\workflows\jobs\steps\sdk\configure-llvm.cmd

      - name: Configure Swift Runtime
        run: scripts\workflows\jobs\steps\sdk\configure-swift-runtime.cmd

      - name: Build Swift Runtime
        run: scripts\workflows\jobs\steps\sdk\build-swift-runtime.cmd

      - name: Install Swift Standard Library
        run: scripts\workflows\jobs\steps\sdk\install-swift-runtime.cmd

      - name: Configure Dispatch
        run: scripts\workflows\jobs\steps\sdk\configure-libdispatch.cmd

      - name: Build Dispatch
        run: scripts\workflows\jobs\steps\sdk\build-libdispatch.cmd

      - name: Configure Foundation
        run: scripts\workflows\jobs\steps\sdk\configure-foundation.cmd

      - name: Build Foundation
        run: scripts\workflows\jobs\steps\sdk\build-foundation.cmd

      - name: Configure XCTest
        run: scripts\workflows\jobs\steps\sdk\configure-xctest.cmd

      - name: Build XCTest
        run: scripts\workflows\jobs\steps\sdk\build-xctest.cmd

      - name: Configure Dispatch Tests
        run: scripts\workflows\jobs\steps\sdk\configure-libdispatch-tests.cmd

      - name: Build Dispatch Tests
        run: scripts\workflows\jobs\steps\sdk\build-libdispatch.cmd

      - name: Test Dispatch
        continue-on-error: true
        run: scripts\workflows\jobs\steps\sdk\test-libdispatch.cmd

      - name: Configure Foundation Test Environment
        run: scripts\workflows\jobs\steps\sdk\configure-foundation-test-environment.cmd

      - name: Configure Foundation Tests
        run: scripts\workflows\jobs\steps\sdk\configure-foundation-tests.cmd

      - name: Build Foundation Tests
        run: scripts\workflows\jobs\steps\sdk\build-foundation.cmd

      - name: Test Foundation (CTest)
        continue-on-error: true
        timeout-minutes: 10
        run: scripts\workflows\jobs\steps\sdk\test-foundation-ctest.cmd

      - name: Test Foundation (XCTest)
        timeout-minutes: 10
        continue-on-error: true
        run: scripts\workflows\jobs\steps\sdk\test-foundation-xctest.cmd

      - name: Install Dispatch
        run: scripts\workflows\jobs\steps\sdk\install-libdispatch.cmd

      - name: Install Foundation
        run: scripts\workflows\jobs\steps\sdk\install-foundation.cmd

      - name: Install XCTest
        run: scripts\workflows\jobs\steps\sdk\install-xctest.cmd

      - name: Install Module Maps
        run: scripts\workflows\jobs\steps\sdk\install-module-maps.cmd

      - name: Generate plists
        run: scripts\workflows\jobs\steps\sdk\generate-plists.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdk-${{ matrix.arch }}
          path: ${{ env.SW_INSTALL_DIR }}

  bundle-toolchain:
    name: Bundle Toolchain
    runs-on: ${{ inputs.runs_on }}
    needs: [toolchain]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]

    steps:
      - name: Clean Workspace
        if: github.event.inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\bundle-toolchain\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Download toolchain
        uses: actions/download-artifact@v3
        with:
          name: toolchain-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Copy Files
        run: scripts\workflows\jobs\steps\bundle-toolchain\copy-toolchain-files.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: toolchain-${{ matrix.arch }}-bundle
          path: ${{ env.SW_BUNDLE_INSTALL_DIR }}
  
  bundle-sdk:
    name: Bundle SDK
    runs-on: ${{ inputs.runs_on }}
    needs: [sdk]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]

    steps:
      - name: Clean Workspace
        if: github.event.inputs.runs_on == 'self-hosted'
        run: |
          for /d %%d in (${{ github.workspace }}\*.*) do rmdir /s /q "%%d"
          del /f /q /s ${{ github.workspace }}

      - name: Configure Git
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read Checkout Info
        run: |
          set SW_SWIFT_REF=${{ needs.toolchain.outputs.swift_ref }}
          echo swift: %SW_SWIFT_REF%
          echo SW_SWIFT_REF=%SW_SWIFT_REF%>>%GITHUB_ENV%

      - name: Configure Build
        run: |
          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%GITHUB_WORKSPACE%\s^
           --build-dir=%GITHUB_WORKSPACE%\b^
           --install-dir=%GITHUB_WORKSPACE%\i^
           --artifacts-dir=%GITHUB_WORKSPACE%\a

      - name: Configure Build Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\bundle-sdk\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout swift
        uses: actions/checkout@v3
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REF }}
          fetch-depth: 1
          path: '${{ env.SW_SWIFT_SOURCES_DIR }}'

      - name: Download SDK
        uses: actions/download-artifact@v3
        with:
          name: sdk-${{ matrix.arch }}
          path: ${{ env.SW_ARTIFACTS_DIR }}

      - name: Copy Files
        run: scripts\workflows\jobs\steps\bundle-sdk\copy-sdk-files.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdk-${{ matrix.arch }}-bundle
          path: ${{ env.SW_BUNDLE_INSTALL_DIR }}
